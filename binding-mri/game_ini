module System
  LOGO = "app_logo"
  DESCRIPTION = "An RGSS-based engine"
  def self.user_language
    @user_language
  end

  def self.platform
    NAME
  end

  def self.linux?
    FAMILY_NAME == "linux"
  end

  def self.windows?
    FAMILY_NAME == "windows"
  end
end

module Game
  INI_FILENAME = (Dir["*.ini"][0] || ".ini")
  DATA = {}
  DATA.default = ""
  RTP = []
  SOUNDFONT_REGEX = "/*.sf{2,3}"
  extend self
  attr_reader(:shot_formats, :shot_format, :shot_dir)
  attr_reader(:shot_filename, :save_filename)
  attr_reader(:soundfont, :soundfonts)
  attr_accessor(:save_dir, :save_filename, :click_timer, :setup_screen)
  def self.clear
    @shot_formats = ["jpg", "png"]
    @shot_format = "jpg"
    @shot_dir = "Screenshots"
    @shot_filename = "screenshot"
    @save_dir = "Saves"
    @save_filename = "Save"
    @click_timer = 10
    @soundfont = ""
  end

  def self.auto_create_dir
    unless Dir.exist?(@shot_dir)
      Dir.mkdir(@shot_dir)
    end
  end

  def self.normal_size?
    (WIDTH >= 320 && HEIGHT >= 240)
  end

  def self.change_size?
    (WIDTH != START_WIDTH || HEIGHT != START_HEIGHT)
  end

  def self.process_exe_name(list)
    4.times do |n|
      if File.exist?(EXE_NAME + list[n])
        return n
      end
    end
    return 0
  end

  def self.process_ini
    begin
      lines = File.readlines(INI_FILENAME)
    rescue => e
      puts e.class, e.message, e.backtrace
      return
    end
    lines.size.times do
      key, value = lines.shift.split(/[\s]{0,}=[\s]{0,}/i)
      unless key and value
        next
      end
      value = value.chomp
      if key[/RTP/i] != nil
        if value.size > 1
          RTP << value
        end
      else
        DATA[key] = value
      end
    end
  end

  def add_soundfonts(dir)
    names = Dir[dir + SOUNDFONT_REGEX].sort
    names.size.times {|n| @soundfonts << names[n] }
  end

  def set_basic_values
    if System.windows?
      dir = DATA.delete("SoundFontPathWin").to_s
      default = DATA.delete("SoundFontWin").to_s
    elsif System.linux?
      dir = DATA.delete("SoundFontPathLnx").to_s
      default = DATA.delete("SoundFontLnx").to_s
    end
    System.const_set("SOUNDFONT_DIR", dir)
    System.const_set("SOUNDFONT", default)
    DATA["Scripts"].sub!("\\", "/")
    const_set("SCRIPTS", DATA.delete("Scripts").to_s)
    const_set("TITLE", DATA.delete("Title").to_s)
    const_set("VERSION", DATA.delete("Version").to_s)
    const_set("AUTHOR", DATA.delete("Author").to_s)
    const_set("EXE_NAME", INI_FILENAME.split('.')[0].to_s)
    icon_name = DATA.delete("Icon").to_s
    icon_name = Dir[icon_name + "*"][0]
    unless FileInt.exist?(icon_name)
      icon_name = ""
    end
    const_set("ICON", icon_name)
    projects = [".rhproj", ".rxproj", ".rvproj", ".rvproj2"]
    encrypt_ext = [".rhc", ".rgssad", ".rgss2a", ".rgss3a"]
    makers = ["HiddenChest", "XP", "VX", "VX Ace"]
    debug = (DATA["Debug"][/true/i] != nil)
    n = process_exe_name(encrypt_ext)
    if n == 0
      n = process_exe_name(projects)
      debug = false
    end
    const_set("DEBUG", debug)
    const_set("ENCRYPTED_NAME", EXE_NAME + encrypt_ext[n])
    const_set("MAKER", makers[n])
    const_set("RGSS_VERSION", n)
    w = DATA.delete("Width").to_i
    h = DATA.delete("Height").to_i
    w = (w == 0 ? START_WIDTH : w)
    h = (h == 0 ? START_HEIGHT : h)
    const_set("WIDTH", w)
    const_set("HEIGHT", h)
    if normal_size?
      @setup_screen = change_size?
    end
    full = (DATA["Fullscreen"][/true/i] != nil)
    const_set("FULLSCREEN", full)
    puts "RGSS Version:       #{n} (#{MAKER})"
    puts "Game Screen Size:   #{WIDTH}x#{HEIGHT}"
    puts "Enable Debug:       #{DEBUG}"
    puts "Trigger Fullscreen: #{FULLSCREEN}"
    @soundfont = System::SOUNDFONT.to_s
    @soundfonts = []
    add_soundfonts(System::SOUNDFONT_DIR)
    add_soundfonts(Dir.pwd + "/Audio/SF2")
    if @soundfont.empty?
      if @soundfonts.size > 0
        @soundfont = @soundfonts[0]
      end
    else
      @soundfonts.delete(@soundfont)
      @soundfonts.unshift(@soundfont)
    end
  end

  def soundfont_index
    @soundfonts.index(@soundfont)
  end

  def setup
    clear
    auto_create_dir
    process_ini
    set_basic_values
    set_internal_values
    $scene = nil
  end

class Scene
  def main
    Graphics.freeze
    start
    Graphics.transition
    Game.setup
    Graphics.freeze
    terminate
  end

  def start
    @visual = nil
    filename = "Graphics/Splash/screen"
    if FileInt.exist?(filename)
      @visual = true
      @backdrop = Sprite.new
      @backdrop.bitmap = Bitmap.new(filename)
      @title = Sprite.new
      @title.set_xy(40, Graphics.height - 80)
      b = Bitmap.new(320, 64)
      font = b.font
      font.size = 28
      font.outline = true
      font.outline_size = 2
      b.draw_text(b.rect, "Loading...")
      @title.bitmap = b
    end
  end

  def terminate
    if @visual
      @title.bitmap.dispose
      @title.dispose
      @backdrop.bitmap.dispose
      @backdrop.dispose
      @visual = nil
    end
  end
end

end

begin
  $scene = Game::Scene.new
  while $scene
    $scene.main
  end
rescue => e
  puts e.class, e.message
  puts e.backtrace
end