class FileIni
  class Section
    def initialize(name)
      @name = name
      @keys = []
      @values = []
      @lines = []
    end
    attr_reader :name, :keys, :values, :lines
  end

  @@last = nil
  attr_reader :filename, :section_names
  def initialize(filename)
    @filename = filename
    @section_names = []
    @sections = []
    begin
      lines = File.readlines(filename)
    rescue => e
      puts e.class, e.message, e.backtrace
      return
    end
    section = nil
    lines.size.times do |n|
      line = lines[n]
      key, value = line.split(/[\s]{0,}=[\s]{0,}/i)
      if !value and !line[/=/]
        name = key.gsub(/\[|\]/, "").chomp
        @section_names << name
        @sections << section = Section.new(name)
        next
      end
      section.keys << key
      section.values << (value ? value.chomp : "")
      section.lines << line
    end
    @@last = self
  end

  def self.open(filename)
    new(filename)
  end

  def self.last
    unless @@last
      raise "Failed to load INI data!\n" +
            "Did you forget to open that file first?"
      return
    end
    @@last.filename
  end

  def entry_not_found(key)
    "Could not find INI entry #{key} in #{@filename}!"
  end

  def read(section_name, key, default)
    n = @section_names.index(section_name)
    section = @sections[n]
    n = section.keys.index(key)
    value = section.values[n]
    value&.empty? ? default : value
  rescue
    default
  end

  def write(section_name, key, value)
    section = find_section(section_name)
    keys = section.keys
    n = find_key_index(section.keys, key, false)
    section.keys[n] = key
    section.values[n] = value.to_s
    section.lines[n] = key + "=#{value}\r\n"
    write_all_entries
  end

  def comment_out(section_name, key)
    section = find_section(section_name)
    keys = section.keys
    n = find_key_index(section.keys, key, true)
    section.keys[n] = ";" + key
    section.values[n] = value.to_s
    section.lines[n] = ";#{key}=#{value}\r\n"
    write_all_entries
  end
  private
  def find_section(section_name)
    n = @section_names.index(section_name)
    section = @sections[n]
    unless section
      section = Section.new(section_name)
      @sections << section
    end
    section
  end

  def find_key_index(keys, key, commented)
    this_key = commented ? ";" + key : key
    n = keys.index(this_key)
    unless n
      this_key = commented ? key : ";" + key
      n = keys.index(this_key) || keys.size
    end
    n
  end

  def write_all_entries
    File.open(@filename, "w") do |f|
      @sections.each do |section|
        f.puts "[#{section.name}]"
        f.puts section.lines
      end
    end
  end
end